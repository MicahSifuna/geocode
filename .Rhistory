install.packages("leaflet")
# load libraries
library(raster)
library(rgdal)
library(sf)
library(sp)
library(terra)
library(caTools)
library(rasterVis)
library(randomForest)
library(caret)
library(colormap)
library(leaflet)
pi * 2
x <- pi * (1:10)^2
print(x)
class(x)
typeof(x)
getClass("Spatial")
print("Hello world")
print("Hello world")
libs <- c(
"tidyverse", "sf", "geodata", "terra", "classInt", "rayshader"
)
installed_libs <- lib %in% rownames(
installed.packages()
)
if(any(installed_libs == F)) {
install.packages(
lib[!installed_libs]
)
}
invisible(lapply(
libs,
library,
character.only = T
))
urls <- c(
"https://share.phys.ethz.ch/~pf/nlangdata/ETH_GlobalCanopyHeight_10m_2020_version1/3deg_cogs/ETH_GlobalCanopyHeight_10m_2020_S03E036_Map.tif",
"https://share.phys.ethz.ch/~pf/nlangdata/ETH_GlobalCanopyHeight_10m_2020_version1/3deg_cogs/ETH_GlobalCanopyHeight_10m_2020_N00E036_Map.tif",
"https://share.phys.ethz.ch/~pf/nlangdata/ETH_GlobalCanopyHeight_10m_2020_version1/3deg_cogs/ETH_GlobalCanopyHeight_10m_2020_N00E033_Map.tif",
"https://share.phys.ethz.ch/~pf/nlangdata/ETH_GlobalCanopyHeight_10m_2020_version1/3deg_cogs/ETH_GlobalCanopyHeight_10m_2020_S03E033_Map.tif",
"https://share.phys.ethz.ch/~pf/nlangdata/ETH_GlobalCanopyHeight_10m_2020_version1/3deg_cogs/ETH_GlobalCanopyHeight_10m_2020_S03E039_Map.tif",
"https://share.phys.ethz.ch/~pf/nlangdata/ETH_GlobalCanopyHeight_10m_2020_version1/3deg_cogs/ETH_GlobalCanopyHeight_10m_2020_N00E039_Map.tif",
)
for(url in urls) {
download.file(
url,
destfile = basename(url),
mode = "wb",
)
}
number = 3
print(number)
urls <- c(
"https://share.phys.ethz.ch/~pf/nlangdata/ETH_GlobalCanopyHeight_10m_2020_version1/3deg_cogs/ETH_GlobalCanopyHeight_10m_2020_S03E036_Map.tif",
"https://share.phys.ethz.ch/~pf/nlangdata/ETH_GlobalCanopyHeight_10m_2020_version1/3deg_cogs/ETH_GlobalCanopyHeight_10m_2020_N00E036_Map.tif",
"https://share.phys.ethz.ch/~pf/nlangdata/ETH_GlobalCanopyHeight_10m_2020_version1/3deg_cogs/ETH_GlobalCanopyHeight_10m_2020_N00E033_Map.tif",
"https://share.phys.ethz.ch/~pf/nlangdata/ETH_GlobalCanopyHeight_10m_2020_version1/3deg_cogs/ETH_GlobalCanopyHeight_10m_2020_S03E033_Map.tif",
"https://share.phys.ethz.ch/~pf/nlangdata/ETH_GlobalCanopyHeight_10m_2020_version1/3deg_cogs/ETH_GlobalCanopyHeight_10m_2020_S03E039_Map.tif",
"https://share.phys.ethz.ch/~pf/nlangdata/ETH_GlobalCanopyHeight_10m_2020_version1/3deg_cogs/ETH_GlobalCanopyHeight_10m_2020_N00E039_Map.tif",
)
for(url in urls) {
download.file(
url,
destfile = basename(url),
mode = "wb",
)
}
data_urls <- c(
"https://share.phys.ethz.ch/~pf/nlangdata/ETH_GlobalCanopyHeight_10m_2020_version1/3deg_cogs/ETH_GlobalCanopyHeight_10m_2020_S03E036_Map.tif",
"https://share.phys.ethz.ch/~pf/nlangdata/ETH_GlobalCanopyHeight_10m_2020_version1/3deg_cogs/ETH_GlobalCanopyHeight_10m_2020_N00E036_Map.tif",
"https://share.phys.ethz.ch/~pf/nlangdata/ETH_GlobalCanopyHeight_10m_2020_version1/3deg_cogs/ETH_GlobalCanopyHeight_10m_2020_N00E033_Map.tif",
"https://share.phys.ethz.ch/~pf/nlangdata/ETH_GlobalCanopyHeight_10m_2020_version1/3deg_cogs/ETH_GlobalCanopyHeight_10m_2020_S03E033_Map.tif",
"https://share.phys.ethz.ch/~pf/nlangdata/ETH_GlobalCanopyHeight_10m_2020_version1/3deg_cogs/ETH_GlobalCanopyHeight_10m_2020_S03E039_Map.tif",
"https://share.phys.ethz.ch/~pf/nlangdata/ETH_GlobalCanopyHeight_10m_2020_version1/3deg_cogs/ETH_GlobalCanopyHeight_10m_2020_N00E039_Map.tif",
)
data_urls <- c(
"https://share.phys.ethz.ch/~pf/nlangdata/ETH_GlobalCanopyHeight_10m_2020_version1/3deg_cogs/ETH_GlobalCanopyHeight_10m_2020_S03E036_Map.tif",
"https://share.phys.ethz.ch/~pf/nlangdata/ETH_GlobalCanopyHeight_10m_2020_version1/3deg_cogs/ETH_GlobalCanopyHeight_10m_2020_N00E036_Map.tif",
"https://share.phys.ethz.ch/~pf/nlangdata/ETH_GlobalCanopyHeight_10m_2020_version1/3deg_cogs/ETH_GlobalCanopyHeight_10m_2020_N00E033_Map.tif",
"https://share.phys.ethz.ch/~pf/nlangdata/ETH_GlobalCanopyHeight_10m_2020_version1/3deg_cogs/ETH_GlobalCanopyHeight_10m_2020_S03E033_Map.tif",
"https://share.phys.ethz.ch/~pf/nlangdata/ETH_GlobalCanopyHeight_10m_2020_version1/3deg_cogs/ETH_GlobalCanopyHeight_10m_2020_S03E039_Map.tif",
"https://share.phys.ethz.ch/~pf/nlangdata/ETH_GlobalCanopyHeight_10m_2020_version1/3deg_cogs/ETH_GlobalCanopyHeight_10m_2020_N00E039_Map.tif"
)
for(url in data_urls) {
download.file(
url,
destfile = basename(url),
mode = "wb"
)
}
raster_files
raster_files <-
list.file(
path = getwd(),
pattern = "ETH",
full.names = T
)
raster_files <-
list.files(
path = getwd(),
pattern = "ETH",
full.names = T
)
raster_files
get_coutry_borders <- function() {
main_path <- getwd()
country_borders <- geodata::gadm(
country = "KE",
level = 1,
path = main_path
) |>
sf::st_as_sf()
return(country_borders)
}
country_borders <- get_coutry_borders
plot(country_borders)
get_coutry_borders <- function() {
main_path <- getwd()
country_borders <- geodata::gadm(
country = "KE",
level = 1,
path = main_path
) |>
sf::st_as_sf()
return(country_borders)
}
country_borders <- get_coutry_borders()
function (expr, restart)
{
restart$exit <- environment()
.Internal(.addRestart(restart))
expr
}
get_coutry_borders <- function() {
main_path <- getwd()
country_borders <- geodata::gadm(
country = "KE",
level = 1,
path = main_path
) |>
sf::st_as_sf()
return(country_borders)
}
country_borders <- get_coutry_borders()
plot(country_borders)
libs <- c(
"tidyverse", "sf", "geodata", "terra", "classInt", "rayshader"
)
installed_libs <- lib %in% rownames(
installed.packages()
)
if(any(installed_libs == F)) {
install.packages(
lib[!installed_libs]
)
}
invisible(lapply(
libs,
library,
character.only = T
))
library(tidyverse)
library(sf)
library(geodata)
install.packages("geodata")
library(geodata)
library(terra)
library(geodata)
library(classInt)
library(rayshader)
library(tidyverse)
install.packages("rayshader")
library(rayshader)
library(geodata)
library(geodata)
get_coutry_borders <- function() {
main_path <- getwd()
country_borders <- geodata::gadm(
country = "KE",
level = 1,
path = main_path
) |>
sf::st_as_sf()
return(country_borders)
}
country_borders <- get_coutry_borders()
plot(country_borders)
unique(
country_borders$NAME_1
)
Kenya_sf <-country_borders |>
sf::st_union()
plot(Kenya_sf)
source("D:/R_Programming/3D/kenya_forest_3D.R")
number <- 10
plot(cars)
number <- 10
number
plot(cars)
number <- 10
number
weight <- 75.3
name <- "Micah"
age <- 25
weight <- 75.3
is.numeric(name)
is.numeric(age)
is.numeric(weight)
data(mtcars)
data(mtcars)
force(mtcars)
View(mtcars)
mtcars$mpg >= 20
mtcar[mtcars$mpg >= 20, ]
mtcars[mtcars$mpg >= 20, ]
mtcars[mtcars$hp >= 20, ]
mtcars[mtcars$hp > 108, ]
mtcars[mtcars$mpg >= 20, mtcars$hp > 108]
mtcars[mtcars$mpg >= 20 & mtcars$hp > 108]
mtcars[mtcars$mpg >= 20 & mtcars$hp > 108, ]
data("diamonds", package = "ggplot2")
# filter diamonds that are less than $3000 with a premium cut
# from base R
diamonds[diamonds$price < 3000 & diamonds&cut == "Premium"]
data("diamonds", package = "ggplot2")
# filter diamonds that are less than $3000 with a premium cut
# from base R
diamonds[diamonds$price < 3000 & diamonds&cut == "Premium",]
data("diamonds", package = "ggplot2")
# filter diamonds that are less than $3000 with a premium cut
# from base R
diamonds[diamonds$price < 3000 & diamonds&cut == "Premium",]
diamonds[diamonds$price < 3000 & diamonds$cut == "Premium", ]
data("diamonds")
# filter diamonds that are less than $3000 with a premium cut
# from base R
diamonds[diamonds$price < 3000 & diamonds&cut == "Premium",]
# filter diamonds that are less than $3000 with a premium cut
# from base R
diamonds[diamonds$price < 3000 & diamonds&cut == "Premium",]
# filter diamonds that are less than $3000 with a premium cut
# from base R
diamonds[diamonds$price < 3000 & diamonds&cut === "Premium",]
# filter diamonds that are less than $3000 with a premium cut
# from base R
diamonds[diamonds$price < 3000 & diamonds&cut = "Premium",]
# filter diamonds that are less than $3000 with a premium cut
# from base R
diamonds[diamonds$price < 3000 & diamonds&cut == "Premium",]
# filter diamonds that are less than $3000 with a premium cut
# from base R
diamonds[diamonds$price < 3000 & diamonds$cut == "Premium",]
# from Tidyverse
# diamonds %>%
#   filter(price > 3000 & cut == "Premium")
# filter diamonds that are less than $3000 with a premium cut
# from base R
# diamonds[diamonds$price < 3000 & diamonds$cut == "Premium",]
# from Tidyverse
diamonds %>%
filter(price > 3000 & cut == "Premium")
# filter diamonds that are less than $3000 with a premium cut
# from base R
# diamonds[diamonds$price < 3000 & diamonds$cut == "Premium",]
# from Tidyverse
diamonds %>%
filter(price < 3000 & cut == "Premium")
library(tidyverse)
# filter diamonds that are less than $3000 with a premium cut
# from base R
# diamonds[diamonds$price < 3000 & diamonds$cut == "Premium",]
# from Tidyverse
diamonds %>%
filter(price < 3000 & cut == "Premium")
diamonds %>%
ggplot(aes(x = price)) +
geom_histogram()
diamonds %>%
ggplot(aes(x = price,
y = carat,
color = cut)) +
geom_point(alpha = 0.5) +
scale_color_brewer(type = "seq")
library(sf)
library(terra)
library(gmap)
install.packages("ggmap")
install.packages("spData")
install.packages("mapview")
install.packages("tmap")
library(sf)
library(terra)
library(ggmap)
library(spData)
library(mapview)
library(ggplot2)
library(tmap)
data("cycle_hire")
head(cycle_hire)
plot(cycle_hire_osm["geometry", axes = TRUE])
plot(cycle_hire_osm["geometry"], axes = TRUE]
plot(cycle_hire_osm["geometry"], axes = TRUE)
st_crs(cycle_hire_osm)
# transforming the CRS from ellipsoidal to projeted
cycle_hire_osm <- st_transform(cycle_hire_osm, crs = st_crs(32630))
head(cycle_hire_osm)
# plot the interactive map using mapview package
mapview(cycle_hire_osm["geometry"], layer.name = "Renta points")
# visualize the "capacity" of each bicycle rental point
mapview(cycle_hire_osm["capacity"], layer.name = "Rental points")
# use spData and sf
data("cycle_hire_osm", package = "spData")
view(cycle_hire_osm)
view(cycle_hire_osm)
head(cycle_hire_osm)
# we can explore Geometry and CRS
plot(st_geometry(cycle_hire_osm))
st_crs(cycle_hire_osm)
# we can explore Geometry and CRS
plot(st_geometry(cycle_hire_osm), axes = TRUE)
st_crs(cycle_hire_osm)
# We can transform the CRS to projected
cycle_hire_osm <- st_transform(cycle_hire_osm, crs = st_crs(32630))
# We can transform the CRS to projected
cycle_hire_osm <- st_transform(cycle_hire_osm, crs = st_crs(32630))
cycle_hire_osm
# plot using the mapview
plot(cycle_hire_osm["geometry"], layer.name = "Rental points")
# plot using the mapview
mapview(cycle_hire_osm["geometry"], layer.name = "Rental points")
# plot for the capacity
mapview(cycle_hire_osm["capacity"], layer.name = "Rental points")
library(sf)
library(terra)
library(ggmap)
library(spData)
library(mapview)
library(ggplot2)
library(tmap)
# line data
data("seine", package = "spData")
# line data
data("seine", package = "spData")
head(seine)
ggplot(seine)+
geom_sf(aes(color = name))+
geom_sf_label(aes(label = name))
data("World", package = "spData")
head(world)
ggplot(world) + geom_sf() + theme_minimal()
ggplot(world) + geom_sf(aes(fill = gdpPerCap)) + theme_minimal()
ggplot(world) + geom_sf(aes(fill = gdpPerCap)) + theme_minimal()
ggplot(world) + geom_sf(aes(fill = gdpPercap)) + theme_minimal()
breaks = quantile(world$gdpPercap,
probs = c(0.025, 0.25, 0.5, 0.75, 0.975),
na.rm = TRUE)
ggplot(world) + geom_sf(aes(fill = gdpPercap)) + theme_minimal()
breaks = quantile(world$gdpPercap,
probs = c(0.025, 0.25, 0.5, 0.75, 0.975),
na.rm = TRUE)
breaks
ggplot(world) + geom_sf(aes(fill = gdpPercap)) + theme_minimal()
breaks = quantile(world$gdpPercap,
probs = c(0.025, 0.25, 0.5, 0.75, 0.975),
na.rm = TRUE)
breaks
hist(world$gdpPercap)
abline(v=breaks, color="red")
ggplot(world) + geom_sf(aes(fill = gdpPercap)) + theme_minimal()
# we can use tmap to do the same thing
tm_shape(world)+
tm_polygons("gdpPercap", palette="YlGnBu", style="quantile")
# we can use tmap to do the same thing
tm_shape(world)+
tm_polygons("gdpPercap", palette="YlGnBu", style="quantile")+
tm_bubbles(size = "pop", col = "red")
# plot interactive map using tmap("view)
tmap_mode("view")
tm_shape(world)+
tm_polygons("gdpPercap", palette="YlGnBu", style="quantile")+
tm_bubbles(size = "pop", col = "red")
plot(cars)
#activate the libraries
library(dplyr, warn.conflicts = FALSE)
library(tidygeocoder)
#setting the working directory
setwd("D:\\geocode")
#get the working directory
getwd()
dir()
# Read the data
data2016 <- read.csv("acc_2016.csv")
data2017<-read.csv("acc_2017.csv")
# Convert the data to a dataframe
#2016
addr2016 <- as.data.frame(data2016)
View(data2016)
summary(data2016)
# Convert the data to a dataframe
#2016
addr2016 <- as.data.frame(data2016)
#2017
addr2017 <- as.data.frame(data2017)
View(addr2016)
# Geocode using the osm method
#2016
geocoded_data016 <- addr2016 %>%
geocode(address = PLACE, method = 'osm', lat = "latitude", long = "longitude")
View(geocoded_data016)
